// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

  // make sure to pick the right one(s) for your usecase
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#binarytargets-options
  binaryTargets = ["windows", "debian-openssl-1.1.x", "native"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  lastName     String
  firstName    String
  birthDate    DateTime
  gender       String
  email        String   @unique
  password     String
  phone        String
  active       Boolean
  creationDate DateTime @default(now())
  updateDate   DateTime @default(now())

  // Relations
  educationalTutor      EducationalTutor?
  apprentice            Apprentice?
  apprenticeMentor      ApprenticeMentor?
  teacher               Teacher?
  curriculumManager     CurriculumManager?
  apprenticeCoordinator ApprenticeCoordinator?
  admin                 Admin?
  companyAccount        CompanyAccount?
  groups                Group[]
}

model Group {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  color       String
  users       User[]
  events      Event[]
  files       GroupFile[]
}

model GroupFile {
  id        Int      @id @default(autoincrement())
  name      String
  comment   String?
  blobName  String
  createdAt DateTime @default(now())
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   Int?
}

model FormationCenter {
  id            Int     @id @default(autoincrement())
  name          String
  address       String
  city          String
  country       String
  studentNumber Int?
  description   String?
  field         String?

  apprenticeCoordinators ApprenticeCoordinator[]
  curriculumManagers     CurriculumManager[]
}

model EducationalTutor {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  apprentices Apprentice[]
}

model Apprentice {
  id                 Int               @id @default(autoincrement())
  userId             Int               @unique
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId          Int?
  company            Company?          @relation(fields: [companyId], references: [id])
  promotion          String?
  poste              String?
  educationalTutorId Int?
  educationalTutor   EducationalTutor? @relation(fields: [educationalTutorId], references: [id])
  apprenticeMentorId Int?
  apprenticeMentor   ApprenticeMentor? @relation(fields: [apprenticeMentorId], references: [id])

  trainingDiary TrainingDiary?
}

model ApprenticeMentor {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])
  poste     String?

  apprentices Apprentice[]
}

model Teacher {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate         DateTime?
  endDate           DateTime?
  formationCenterId Int?

  specialities Speciality[]
}

model CurriculumManager {
  id                Int              @id @default(autoincrement())
  userId            Int              @unique
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  formationCenterId Int?
  formationCenter   FormationCenter? @relation(fields: [formationCenterId], references: [id])
  dateDebut         DateTime?
  dateFin           DateTime?
}

model ApprenticeCoordinator {
  id                Int              @id @default(autoincrement())
  userId            Int              @unique
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  formationCenterId Int?
  formationCenter   FormationCenter? @relation(fields: [formationCenterId], references: [id])
  dateDebut         DateTime?
  dateFin           DateTime?
}

model Admin {
  idAdmin Int  @id @default(autoincrement())
  userId  Int  @unique
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id               Int     @id @default(autoincrement())
  name             String
  address          String
  city             String
  country          String  @default("France")
  description      String? @default(" ")
  apprenticeNumber Int?    @default(0)
  opco             String? @default("")

  apprentices       Apprentice[]
  apprenticeMentors ApprenticeMentor[]
  specialities      Speciality[]
  companyAccounts   CompanyAccount[]

  @@map("Company")
}

model Speciality {
  id   Int    @id @default(autoincrement())
  name String

  teachers  Teacher[]
  companies Company[]
}

model Event {
  id          Int           @id @default(autoincrement())
  type        String
  description String?
  endDate     DateTime
  groups      Group[]
  files       EventFile[]
  delivrables Deliverable[]
}

model EventFile {
  id        Int      @id @default(autoincrement())
  name      String
  comment   String?
  blobName  String
  createdAt DateTime @default(now())
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   Int?
}

model TrainingDiary {
  id                 Int                  @id @default(autoincrement())
  description        String?
  apprentice   Apprentice    @relation(fields: [apprenticeId], references: [id], onDelete: Cascade)
  apprenticeId Int           @unique
  notes              Note[]
  biannualEvaluation BiannualEvaluation[]
  delivrable         Deliverable[]
}

model CompanyAccount {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id])
  companyId Int     @unique
  company   Company @relation(fields: [companyId], references: [id])
}

model Note {
  id              Int           @id @default(autoincrement())
  title           String
  content         String
  trainingDiaryId Int
  trainingDiary   TrainingDiary @relation(fields: [trainingDiaryId], references: [id], onDelete: Cascade)
  creationDate    DateTime      @default(now())
  updateDate      DateTime      @default(now())
}

model Deliverable {
  id              Int            @id @default(autoincrement())
  comment         String?
  blobName        String
  createdAt       DateTime       @default(now())
  event           Event?         @relation(fields: [eventId], references: [id])
  eventId         Int?
  trainingDiary   TrainingDiary? @relation(fields: [trainingDiaryId], references: [id])
  trainingDiaryId Int?
}

model EmailTemplate {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  subject   String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id                 Int               @id @default(autoincrement())
  code               String            @unique
  name               String            @unique
  description        String            @unique
  inProgressSemester String?
  obtainedSemester   String
  skillEvaluations   SkillEvaluation[]
}

model SkillEvaluation {
  id                   Int                @id @default(autoincrement())
  status               String
  comment              String
  skillId              Int
  skill                Skill              @relation(fields: [skillId], references: [id])
  biannualEvaluationId Int
  biannualEvaluation   BiannualEvaluation @relation(fields: [biannualEvaluationId], references: [id], onDelete: Cascade)

  @@unique([skillId, biannualEvaluationId])
}

model BiannualEvaluation {
  id               Int               @id @default(autoincrement())
  semester         String
  createdAt        DateTime          @default(now())
  trainingDiaryId  Int
  trainingDiary    TrainingDiary     @relation(fields: [trainingDiaryId], references: [id], onDelete: Cascade)
  skillEvaluations SkillEvaluation[]
}
