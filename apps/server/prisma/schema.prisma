// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

  // make sure to pick the right one(s) for your usecase
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#binarytargets-options
  binaryTargets = ["windows", "debian-openssl-1.1.x", "native"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  lastName     String
  firstName    String
  birthDate    DateTime
  gender       String
  email        String   @unique
  password     String
  phone        String
  active       Boolean
  creationDate DateTime @default(now())
  updateDate   DateTime @default(now())

  // Relations
  educationalTutor      EducationalTutor?
  apprentice            Apprentice?
  apprenticeMentor      ApprenticeMentor?
  teacher               Teacher?
  curriculumManager     CurriculumManager?
  apprenticeCoordinator ApprenticeCoordinator?
  admin                 Admin?
  groups                Group[]
}

model Group {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  color       String
  users       User[]
  events      Event[]
}

model FormationCenter {
  id            Int     @id @default(autoincrement())
  name          String
  address       String
  city          String
  country       String
  studentNumber Int?
  description   String?
  field         String?

  apprenticeCoordinator ApprenticeCoordinator[]
  curriculumManager     CurriculumManager[]
}

model EducationalTutor {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  apprentice Apprentice[]
}

model Apprentice {
  id                 Int               @id @default(autoincrement())
  userId             Int               @unique
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId          Int?
  company            Compagny?         @relation(fields: [companyId], references: [id])
  promotion          String?
  poste              String?
  educationalTutorId Int?
  educationalTutor   EducationalTutor? @relation(fields: [educationalTutorId], references: [id])
  apprenticeMentorId Int?
  apprenticeMentor   ApprenticeMentor? @relation(fields: [apprenticeMentorId], references: [id])

  trainingDiary TrainingDiary?
}

model ApprenticeMentor {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId Int?
  company   Compagny? @relation(fields: [companyId], references: [id])
  poste     String?

  apprentice Apprentice[]
}

model Teacher {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate         DateTime?
  endDate           DateTime?
  formationCenterId Int?

  speciality Speciality[]
}

model CurriculumManager {
  id                Int              @id @default(autoincrement())
  userId            Int              @unique
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  formationCenterId Int?
  formationCenter   FormationCenter? @relation(fields: [formationCenterId], references: [id])
  dateDebut         DateTime?
  dateFin           DateTime?
}

model ApprenticeCoordinator {
  id                Int              @id @default(autoincrement())
  userId            Int              @unique
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  formationCenterId Int?
  formationCenter   FormationCenter? @relation(fields: [formationCenterId], references: [id])
  dateDebut         DateTime?
  dateFin           DateTime?
}

model Admin {
  idAdmin Int  @id @default(autoincrement())
  userId  Int  @unique
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Compagny {
  id               Int     @id @default(autoincrement())
  name             String
  address          String
  city             String
  country          String
  description      String?
  apprenticeNumber Int?
  opco             String?

  apprentice       Apprentice[]
  apprenticeMentor ApprenticeMentor[]
  speciality       Speciality[]
}

model Speciality {
  id   Int    @id @default(autoincrement())
  name String

  teacher  Teacher[]
  compagny Compagny[]
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  createdAt DateTime @default(now())
  Event     Event?   @relation(fields: [eventId], references: [id])
  eventId   Int?
}

model Event {
  id          Int      @id @default(autoincrement())
  type        String
  description String?
  endDate     DateTime
  groups      Group[]
  files       File[]
}

model TrainingDiary {
  id           Int        @id @default(autoincrement())
  description  String?
  apprenticeId Int        @unique
  apprentice   Apprentice @relation(fields: [apprenticeId], references: [id])
}
